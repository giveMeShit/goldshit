//找到数组中和为指定数值的4个数，解决办法，循环调用3sum的解法，将所有可能的数组输出
public class Solution {
 public static List<List<Integer>> fourSum(int[] nums, int target) {
		List<List<Integer>> outPut = new ArrayList<>();
		HashSet<List<Integer>> set = new HashSet<>();
		if(nums.length < 4) return outPut;
		Arrays.sort(nums);
		int max = nums[nums.length - 1];
		if( 4 * nums[0] > target || 4 * nums[nums.length-1] < target) return outPut;
		int z;
		for(int i=0;i<nums.length;i++){
			z = nums[i];
			if (i > 0 && z == nums[i - 1])// avoid duplicate
				continue;
			if (z + 3 * max < target) // z is too small
				continue;
			if (4 * z > target) // z is too large
				break;
			threeSums(nums,target-nums[i],i+1,set,z);
		}
		outPut.addAll(set);
		return outPut;
	}
	
	public static void threeSums(int[] nums,int target,int low,HashSet<List<Integer>> set,int z){
		int left =0,right =0;
		for(int j=low;j<nums.length-2;j++){
			left = j+1; right = nums.length-1;
			while(left < right){
				if(nums[j] + nums[left] + nums[right] == target){
					List<Integer> list = Arrays.asList(z,nums[j],nums[left],nums[right]);
					/*list.sort(new Comparator<Integer>() {
						@Override
						public int compare(Integer c1,Integer c2){
							return c1-c2;
						}
					});*/
					set.add(list);
					right--;
					left++;
				}else if(nums[j] + nums[left] + nums[right] > target){
					right--;
				}else{
					left++;
				}
			}
		}
	}
}
